#################
# General
#################

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

#################
# Kubernetes
#################

# Get all contexts
function kcg() {
    kubectl config get-contexts
}

# Change the current kubectl context
function kc() {
    kubectl config use-context "$1"
}

# Change the current kubectl namespace
function kn() {
    kubectl config set-context --current --namespace="$1"
}

# Get all pods in the current namespace
function kp() {
    kubectl get pods
}

# Watch all pods in the current namespace
function kpw() {
    watch -n 1 kubectl get pods
}

# Get all pods in the current namespace with more details
function kpd() {
    kubectl get pods -o wide
}

# Get all pods in all namespaces except kube-system, flux-system and metallb-system
function kpa() {
    kubectl get pods --all-namespaces --field-selector 'metadata.namespace!=kube-system,metadata.namespace!=flux-system,metadata.namespace!=metallb-system'
}

# Get all pods in all namespaces
function kpas() {
    kubectl get pods --all-namespaces
}

# Watch all pods in all namespaces except kube-system, flux-system and metallb-system
function kpaw() {
    watch -n 1 kubectl get pods --all-namespaces --field-selector 'metadata.namespace!=kube-system,metadata.namespace!=flux-system,metadata.namespace!=metallb-system'
}

# Watch all pods in all namespaces
function kpaws() {
    watch -n 1 kubectl get pods --all-namespaces
}

# Get all pods in all namespaces with more details
function kpad() {
    kubectl get pods --all-namespaces -o wide
}

# Get all events in the current namespace and sort by timestamp
function ke() {
    kubectl get events --sort-by='.lastTimestamp'
}

# Get all events in all namespaces and sort by timestamp
function kea() {
    kubectl get events --all-namespaces --sort-by='.lastTimestamp'
}

# Get all services in the current namespace
function ks() {
    kubectl get services
}

# Get all services in all namespaces
function ksa() {
    kubectl get services --all-namespaces
}

# Get all deployments in the current namespace
function kd() {
    kubectl get deployments
}

# Get all deployments in all namespaces
function kda() {
    kubectl get deployments --all-namespaces
}

# Get all statefulsets in the current namespace
function kss() {
    kubectl get statefulsets
}

# Get all statefulsets in all namespaces
function kssa() {
    kubectl get statefulsets --all-namespaces
}

# Get all replicasets in the current namespace
function krs() {
    kubectl get replicasets
}

# Get all replicasets in all namespaces
function krsa() {
    kubectl get replicasets --all-namespaces
}

# Get cumulative CPU and Memory usage of all pods in a namespace
function ktns() {
    local NAMESPACE=$1
    local AWK_SCRIPT='{cpu+=$2; memory+=$3} END {print "CPU(m):", cpu, " - ", "Memory(Mi):", memory}'

    if [ -z "$NAMESPACE" ]; then
        kubectl top pod --no-headers | awk "$AWK_SCRIPT"
    else
        kubectl top pod --namespace "$NAMESPACE" --no-headers | awk "$AWK_SCRIPT"
    fi
}

# Get CPU and Memory usage of each namespace
function ktnsa() {
    kubectl get namespaces -o json | jq -r '.items[] | .metadata.name' | while read -r NAMESPACE; do
        echo "Namespace: $NAMESPACE"
        ktns "$NAMESPACE"
        echo
    done
}

#################
# Git
#################

# Git Clone and cd into it
function gc() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Git Clone and cd into it and open in VS Code
function gcv() {
    gc "$1" && code .
}

#################
# Flux CD
#################

function flux_base() {
    local command="$1"
    local kind="$2"
    local name="$3"
    local namespace="$4"

    if [ ! -z "$namespace" ]; then
        flux $command kustomization "$name" --namespace "$namespace"
    else
        flux $command kustomization "$name"
    fi
}

# Display flux status
function fs() {
    flux stats
}

# Display all flux events in the current namespace
function fe() {
    flux events
}

# Display all flux events in all namespaces
function fea() {
    flux events --all-namespaces
}

# Get all flux kustomizations in all namespaces
function fkls() {
    flux get kustomizations --all-namespaces
}

# Watch all flux kustomizations in all namespaces
function fkw() {
    watch -n 1 flux get kustomizations --all-namespaces
}

# Reconile a kustomization with name
function fk() {
    flux_base reconcile kustomization "$@"
}

# Reconile a helmrelease with name
function fh() {
    flux_base reconcile helmrelease "$@"
}

# Suspends a kustomization with name
function fks() {
    flux_base suspend kustomization "$@"
}

# Resumes a kustomization with name
function fkr() {
    flux_base resume kustomization "$@"
}

# Get all flux git sources
function fgs() {
    flux get sources git
}

# Reconile a git source with name
function fg() {
    flux reconcile source git "$@"
}

#################
# Starship
#################

# Toggle Kubernetes module
function sk() {
    starship toggle kubernetes
}

#################
# 1Password
#################

# Login to 1Password CLI
function opl() {
    eval $(op signin)
}

#################
# nix-shell
#################

# Enter a nix-shell with the given packages
function nixp() {
    nix-shell -p "$@"
}

#################
# Skaffold
#################

# Run skaffold dev with the given profile if provided
function skd() {
    if [ -z "$1" ]; then
        skaffold dev
    else
        skaffold dev --profile "$1"
    fi
}
