#################
# General
#################

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# Change to the root directory of the current git repository
function cdr() {
    local root
    root="$(git rev-parse --show-toplevel)" || return 1

    cd "$root" || return 1

    if [ $# -gt 0 ]; then
        cd "$@"
    fi
}


#################
# Kubernetes
#################

function filter_kubectl_output() {
    local PATTERN=$1
    local COMMAND=$2

    if [ ! -z "$PATTERN" ]; then
        eval $COMMAND | grep -i "$PATTERN"
    else
        eval $COMMAND
    fi
}

# Set the current kubeconfig
function kcs() {
    # Ensure the kubeconfig exists
    if [ ! -f "$HOME/.kube/$1" ]; then
        echo "Kubeconfig $1 does not exist"
        return
    fi

    export KUBECONFIG=$HOME/.kube/$1
}

# Set all kubeconfigs
function kca() {
    export KUBECONFIG=$(find "$HOME/.kube" -path "$HOME/.kube/cache" -prune -o -type f -print | sed 's/$/:/' | tr -d '\n' | sed 's/:$//')
}

# Unset the current kubeconfig
function kcu() {
    unset KUBECONFIG
}

# Get all pods in all namespaces except kube-system, flux-system and metallb-system
function kpa() {
    local PATTERN=$1
    local COMMAND="kubectl get pods --all-namespaces --field-selector 'metadata.namespace!=kube-system,metadata.namespace!=flux-system,metadata.namespace!=metallb-system'"

    filter_kubectl_output "$PATTERN" "$COMMAND"
}

# Watch all pods in all namespaces except kube-system, flux-system and metallb-system
function kpaw() {
    watch -n 1 kubectl get pods --all-namespaces --field-selector 'metadata.namespace!=kube-system,metadata.namespace!=flux-system,metadata.namespace!=metallb-system'
}

# Get cumulative CPU and Memory usage of all pods in a namespace
function ktns() {
    local NAMESPACE=$1
    local AWK_SCRIPT='{cpu+=$2; memory+=$3} END {print "CPU(m):", cpu, " - ", "Memory(Mi):", memory}'

    if [ -z "$NAMESPACE" ]; then
        kubectl top pod --no-headers | awk "$AWK_SCRIPT"
    else
        kubectl top pod --namespace "$NAMESPACE" --no-headers | awk "$AWK_SCRIPT"
    fi
}

# Get CPU and Memory usage of each namespace
function ktnsa() {
    kubectl get namespaces -o json | jq -r '.items[] | .metadata.name' | while read -r NAMESPACE; do
        echo "Namespace: $NAMESPACE"
        ktns "$NAMESPACE"
        echo
    done
}


#################
# Git
#################

# Git Clone and cd into it
function gc() {
    git clone "$1" && cd "$(basename "$1" .git)"
}

# Git Clone and cd into it and open in Cursor
function gcc() {
    gc "$1" && cursor .
}

# Git Clone and cd into it and open in VS Code
function gcv() {
    gc "$1" && code .
}

# Git Status with short output
function gs() {
    git status -s
}


#################
# Starship
#################

# Toggle Kubernetes module
function sk() {
    starship toggle kubernetes
}


#################
# 1Password
#################

# Login to 1Password CLI
function opl() {
    eval $(op signin)
}


#################
# nix-shell
#################

# Enter a nix-shell with the given packages
function nixp() {
    nix-shell -p "$@"
}


#################
# kubectl-ai
#################

# kubectl-ai interactive mode
function kai() {
    # Set provider and model since config.yaml is not working
    kubectl-ai --llm-provider=grok --model=grok-3 "$@"
}

# kubectl-ai in quiet mode
function kaiq() {
    kubectl-ai --llm-provider=grok --model=grok-3 --quiet "$@"
}
